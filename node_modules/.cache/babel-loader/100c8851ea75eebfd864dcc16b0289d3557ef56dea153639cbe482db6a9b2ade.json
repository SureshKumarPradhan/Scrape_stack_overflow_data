{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { getTagsAction, getReportAction } from \"../Action/Action\";\nconst initialState = {\n  Tags: {\n    data: [],\n    isLoading: false,\n    isSucess: false,\n    errorMessage: \"\"\n  },\n  ReportData: {\n    data: {},\n    isLoading: false,\n    isSucess: false,\n    errorMessage: \"\"\n  }\n};\nexport const ScrapReducer = createSlice({\n  name: \"scrapData\",\n  initialState,\n  reducers: {},\n  extraReducers: scrapData => {}\n\n  // [getTagsAction.rejected]: (state, { payload }) => {\n  //   state.Tags.isLoading = false;\n  //   state.Tags.isSucess = false;\n  //   state.Tags.errorMessage = payload\n  // },\n  // [getTagsAction.fulfilled]: (state, { payload }) => {\n  //   console.log(payload,\"payload\")\n  //   state.Tags.isLoading = false;\n  //   state.Tags.isSucess = true;\n  //   state.Tags.data =  payload.items;\n  // },\n\n  // [getReportAction.rejected]: (state, { payload }) => {\n  //   state.ReportData.isLoading = false;\n  //   state.ReportData.isSucess = false;\n  //   state.ReportData.errorMessage = payload\n  // },\n  // [getReportAction.fulfilled]: (state, { payload }) => {\n  //   state.ReportData.isLoading = false;\n  //   state.ReportData.isSucess = true;\n  //   const questions = payload.items;\n  //   const totalQuestions = questions.length;\n  //   const totalVotes = questions.reduce((total, question) => total + question.score, 0);\n  //   const totalViews = questions.reduce((total, question) => total + question.view_count, 0);\n  //   state.ReportData.data =  {\n  //     totalQuestion :totalQuestions,\n  //     totalVotes: totalVotes,\n  //     totalViews : totalViews\n  //   };\n  // },\n});\n\n// Action creators are generated for each case reducer function\nexport const {} = ScrapReducer.actions;\nexport default ScrapReducer.reducer;\n\n// getCartList","map":{"version":3,"names":["createSlice","getTagsAction","getReportAction","initialState","Tags","data","isLoading","isSucess","errorMessage","ReportData","ScrapReducer","name","reducers","extraReducers","scrapData","actions","reducer"],"sources":["/home/suresh/Desktop/practice/scrapedata/src/reducer/ScrapReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { getTagsAction,getReportAction } from \"../Action/Action\";\nconst initialState = {\n  Tags: {\n    data: [],\n    isLoading: false,\n    isSucess: false,\n    errorMessage: \"\",\n  },\n  ReportData: {\n    data: {},\n    isLoading: false,\n    isSucess: false,\n    errorMessage: \"\",\n  },\n \n};\n\nexport const ScrapReducer = createSlice({\n  name: \"scrapData\",\n  initialState,\n  reducers: {\n  \n  },\n  extraReducers: (scrapData)=>{\n\n  }\n\n\n\n\n  \n    // [getTagsAction.rejected]: (state, { payload }) => {\n    //   state.Tags.isLoading = false;\n    //   state.Tags.isSucess = false;\n    //   state.Tags.errorMessage = payload\n    // },\n    // [getTagsAction.fulfilled]: (state, { payload }) => {\n    //   console.log(payload,\"payload\")\n    //   state.Tags.isLoading = false;\n    //   state.Tags.isSucess = true;\n    //   state.Tags.data =  payload.items;\n    // },\n  \n\n    // [getReportAction.rejected]: (state, { payload }) => {\n    //   state.ReportData.isLoading = false;\n    //   state.ReportData.isSucess = false;\n    //   state.ReportData.errorMessage = payload\n    // },\n    // [getReportAction.fulfilled]: (state, { payload }) => {\n    //   state.ReportData.isLoading = false;\n    //   state.ReportData.isSucess = true;\n    //   const questions = payload.items;\n    //   const totalQuestions = questions.length;\n    //   const totalVotes = questions.reduce((total, question) => total + question.score, 0);\n    //   const totalViews = questions.reduce((total, question) => total + question.view_count, 0);\n    //   state.ReportData.data =  {\n    //     totalQuestion :totalQuestions,\n    //     totalVotes: totalVotes,\n    //     totalViews : totalViews\n    //   };\n    // },\n  \n});\n\n// Action creators are generated for each case reducer function\nexport const {\n \n} = ScrapReducer.actions;\n\nexport default ScrapReducer.reducer;\n\n// getCartList\n\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,aAAa,EAACC,eAAe,QAAQ,kBAAkB;AAChE,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE;IACJC,IAAI,EAAE,EAAE;IACRC,SAAS,EAAE,KAAK;IAChBC,QAAQ,EAAE,KAAK;IACfC,YAAY,EAAE;EAChB,CAAC;EACDC,UAAU,EAAE;IACVJ,IAAI,EAAE,CAAC,CAAC;IACRC,SAAS,EAAE,KAAK;IAChBC,QAAQ,EAAE,KAAK;IACfC,YAAY,EAAE;EAChB;AAEF,CAAC;AAED,OAAO,MAAME,YAAY,GAAGV,WAAW,CAAC;EACtCW,IAAI,EAAE,WAAW;EACjBR,YAAY;EACZS,QAAQ,EAAE,CAEV,CAAC;EACDC,aAAa,EAAGC,SAAS,IAAG,CAE5B;;EAME;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAEJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM,CAEb,CAAC,GAAGJ,YAAY,CAACK,OAAO;AAExB,eAAeL,YAAY,CAACM,OAAO;;AAEnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}